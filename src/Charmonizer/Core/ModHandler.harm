/* Chaz/Core/ModHandler.h -- symbols used by modules in the Charmonizer core distro.
 */

#ifndef H_CHAZ_MOD_HAND
#define H_CHAZ_MOD_HAND 1

#include <stdio.h>
#include <stddef.h>
#include "Charmonizer/Core/Defines.h"

struct chaz_OperSys;
struct chaz_Compiler;

/* Temporary files used by Charmonizer. 
 */
#define CHAZ_MOD_HAND_TRY_SOURCE_PATH  "_charmonizer_try.c"
#define CHAZ_MOD_HAND_TRY_APP_BASENAME "_charmonizer_try"
#define CHAZ_MOD_HAND_TARGET_PATH      "_charmonizer_target"

/* Global variables.
 */
extern struct chaz_OperSys  *chaz_ModHand_os;
extern struct chaz_Compiler *chaz_ModHand_compiler;
extern chaz_bool_t chaz_ModHand_charm_run_available;
extern FILE* chaz_ModHand_charm_test_h_fh;
extern FILE* chaz_ModHand_conf_fh;
extern chaz_bool_t chaz_ModHand_want_charm_test_h;

extern char *chaz_ModHand_constant_prefix;
extern char *chaz_ModHand_macro_prefix;
extern char *chaz_ModHand_typedef_prefix;
extern char *chaz_ModHand_function_prefix;
extern chaz_bool_t chaz_ModHand_want_short_names;

/* Initialize elements needed by ModHandler.  Must be called before anything 
 * else, but after os and compiler are created.
 */
void
chaz_ModHand_init();

/* Attempt to compile the supplied source code and return true if the
 * effort succeeds.
 */
chaz_bool_t
chaz_ModHand_test_compile(char *source, size_t source_len);

/* Attempt to compile the supplied source code.  If successful, capture the 
 * output of the program and return a pointer to a newly allocated buffer.
 * If the compilation fails, return NULL.  The length of the captured 
 * output will be placed into the buffer pointed to by [output_len].
 */
char*
chaz_ModHand_capture_output(char *source, size_t source_len, 
                            size_t *output_len);


/* First print output to the user-supplied filehandle.  Then, write output to
 * _charm_test.h, if indicated.
 */
void
chaz_ModHand_append_conf(FILE *conf_fh, char *fmt, ...);

/* Print bookends delimiting a short names block.
 */
#define Chaz_ModHand_Start_Short_Names(conf_fh) \
  append_conf(conf_fh, \
    "\n#if defined(%sUSE_SHORT_NAMES) || defined(CHAZ_USE_SHORT_NAMES)\n", \
            chaz_ModHand_constant_prefix)

#define Chaz_ModHand_End_Short_Names(conf_fh) \
    append_conf(conf_fh, \
        "#endif /* USE_SHORT_NAMES */\n", chaz_ModHand_constant_prefix)

/* Define a shortened version of a constant symbol (minus the prefix);
 */
void
chaz_ModHand_shorten_constant(const char *symbol);

/* Define a shortened version of a macro symbol (minuse the prefix);
 */
void
chaz_ModHand_shorten_macro(const char *symbol);

/* Define a shortened version of a typedef symbol (minuse the prefix);
 */
void
chaz_ModHand_shorten_typedef(const char *symbol);

/* Define a shortened version of a function symbol (minuse the prefix);
 */
void
chaz_ModHand_shorten_function(const char *symbol);

/* Signal Charmonizer that it should write _charm_test.h.
 */
void
chaz_ModHand_write_charm_test_h();

/* Print a "chapter heading" when starting a module. 
 */
#define Chaz_ModHand_Start_Run(filehandle, module_name) \
    do { \
        append_conf(filehandle, "\n/* %s */\n", module_name); \
        if (verbosity > 0) \
            printf("Running %s module...\n", module_name); \
    } while (0)

/* Leave a little whitespace at the end of each module.
 */
#define Chaz_ModHand_End_Run(filehandle) \
    append_conf(filehandle, "\n")


#ifdef CHAZ_USE_SHORT_NAMES
# define TRY_SOURCE_PATH        CHAZ_MOD_HAND_TRY_SOURCE_PATH
# define TRY_APP_BASENAME       CHAZ_MOD_HAND_TRY_APP_BASENAME
# define TARGET_PATH            CHAZ_MOD_HAND_TARGET_PATH
# define os                     chaz_ModHand_os
# define compiler               chaz_ModHand_compiler
# define charm_run_available    chaz_ModHand_charm_run_available
# define charm_test_h_fh        chaz_ModHand_charm_test_h_fh
# define want_charm_test_h      chaz_ModHand_want_charm_test_h
# define constant_prefix        chaz_ModHand_constant_prefix
# define macro_prefix           chaz_ModHand_macro_prefix
# define typedef_prefix         chaz_ModHand_typedef_prefix
# define function_prefix        chaz_ModHand_function_prefix
# define want_short_names       chaz_ModHand_want_short_names
# define ModHand_init           chaz_ModHand_init
# define write_charm_h          chaz_ModHand_write_charm_h
# define build_charm_run        chaz_ModHand_build_charm_run
# define Start_Short_Names      Chaz_ModHand_Start_Short_Names
# define End_Short_Names        Chaz_ModHand_End_Short_Names
# define test_compile           chaz_ModHand_test_compile
# define capture_output         chaz_ModHand_capture_output 
# define append_conf            chaz_ModHand_append_conf
# define shorten_constant       chaz_ModHand_shorten_constant
# define shorten_macro          chaz_ModHand_shorten_macro
# define shorten_typedef        chaz_ModHand_shorten_typedef
# define shorten_function       chaz_ModHand_shorten_function
# define Start_Run              Chaz_ModHand_Start_Run
# define End_Run                Chaz_ModHand_End_Run
# define ModHand_write_charm_test_h chaz_ModHand_write_charm_test_h
#endif

#endif /* H_CHAZ_CORE */

/**
 * Copyright 2006 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

