/* Chaz/Core.h -- symbols used by modules in the Charmonizer core distro.
 */

#ifndef H_CHAZ_CORE
#define H_CHAZ_CORE 1

#include <stdio.h>
#include <stddef.h>
#include "Charmonizer/Defines.h"

/* Temporary files used by Charmonizer. 
 */
#define CHAZ_CORE_TRY_SOURCE_PATH  "_charmonizer_try.c"
#define CHAZ_CORE_TRY_APP_PATH     "_charmonizer_try"
#define CHAZ_CORE_TARGET_PATH      "_charmonizer_target"

/* Global variables.
 */
extern char *chaz_Core_cc_command;
extern char *chaz_Core_cc_flags;
extern char *chaz_Core_os_name;
extern char *chaz_Core_object_flag;
extern char *chaz_Core_include_flag;
extern char *chaz_Core_obj_ext;
extern char *chaz_Core_exe_ext;
extern char *chaz_Core_constant_prefix;
extern char *chaz_Core_macro_prefix;
extern char *chaz_Core_typedef_prefix;
extern char *chaz_Core_function_prefix;
extern chaz_bool_t chaz_Core_want_short_names;

/* Write the "_charm.h" file used by every probe.
 */
void
chaz_Core_write_charm_h();

/* Compile a small wrapper application which is used to redirect error output
 * to devnull.
 */
void
chaz_Core_build_charm_run();

/* Determine whether commands should be issued as ./do_stuff, .\do_stuff, or
 * something else.  See how the compiler wants its object argument specified:
 * '-o', '/o'.  Etc...
 */
void
chaz_Core_probe_compiler_syntax();

/* Find a string representation for the bit black hole, e.g. '/dev/null' on
 * Unix, 'nul' on Windows. 
 */
void
chaz_Core_probe_devnull();

/* Attempt to compile the supplied source code.  If successful, capture the 
 * output of the program and return a pointer to a newly allocated buffer.
 * If the compilation fails, return NULL.  The length of the captured 
 * output will be placed into the buffer pointed to by [output_len].
 */
char*
chaz_Core_capture_output(char *source, size_t source_len, size_t *output_len);

/* Print bookends delimiting a short names block.
 */
#define Start_Short_Names(conf_fh) \
    fprintf(conf_fh, "\n#ifdef %sUSE_SHORT_NAMES\n", chaz_Core_constant_prefix)

#define End_Short_Names(conf_fh) \
    fprintf(conf_fh, "#endif /* %sUSE_SHORT_NAMES */\n", \
        chaz_Core_constant_prefix)

/* Define a shortened version of a constant symbol (minus the prefix);
 */
void
chaz_Core_shorten_constant(FILE *conf_fh, const char *symbol);

/* Define a shortened version of a macro symbol (minuse the prefix);
 */
void
chaz_Core_shorten_macro(FILE *conf_fh, const char *symbol);

/* Define a shortened version of a typedef symbol (minuse the prefix);
 */
void
chaz_Core_shorten_typedef(FILE *conf_fh, const char *symbol);

/* Define a shortened version of a function symbol (minuse the prefix);
 */
void
chaz_Core_shorten_function(FILE *conf_fh, const char *symbol);

/* Print a "chapter heading" when starting a module. 
 */
#define Chaz_Core_Start_Run(filehandle, module_name) \
    do { \
        fprintf(filehandle, "\n/* %s */\n", module_name); \
        if (verbosity > 0) \
            printf("Running %s module...\n", module_name); \
    } while (0)


/* Leave a little whitespace at the end of each module.
 */
#define Chaz_Core_End_Run(filehandle) \
    fprintf(filehandle, "\n")

#ifdef CHAZ_USE_SHORT_NAMES
# define TRY_SOURCE_PATH        CHAZ_CORE_TRY_SOURCE_PATH
# define TRY_APP_PATH           CHAZ_CORE_TRY_APP_PATH
# define TARGET_PATH            CHAZ_CORE_TARGET_PATH
# define cc_command             chaz_Core_cc_command
# define cc_flags               chaz_Core_cc_flags
# define os_name                chaz_Core_os_name
# define object_flag            chaz_Core_object_flag
# define include_flag           chaz_Core_include_flag
# define obj_ext                chaz_Core_obj_ext
# define exe_ext                chaz_Core_exe_ext
# define constant_prefix        chaz_Core_constant_prefix
# define macro_prefix           chaz_Core_macro_prefix
# define typedef_prefix         chaz_Core_typedef_prefix
# define function_prefix        chaz_Core_function_prefix
# define want_short_names       chaz_Core_want_short_names
# define write_charm_h          chaz_Core_write_charm_h
# define build_charm_run        chaz_Core_build_charm_run
# define probe_compiler_syntax  chaz_Core_probe_compiler_syntax
# define probe_devnull          chaz_Core_probe_devnull
# define capture_output         chaz_Core_capture_output 
# define shorten_constant       chaz_Core_shorten_constant
# define shorten_macro          chaz_Core_shorten_macro
# define shorten_typedef        chaz_Core_shorten_typedef
# define shorten_function       chaz_Core_shorten_function
# define Start_Run              Chaz_Core_Start_Run
# define End_Run                Chaz_Core_End_Run
#endif

#endif /* H_CHAZ_CORE */

/**
 * Copyright 2006 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

