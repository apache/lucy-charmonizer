/* Charmonizer/Test/TestHandler.h - test Charmonizer's output.
 */

#ifndef H_CHAZ_TEST_HANDLER
#define H_CHAZ_TEST_HANDLER

#include "Charmonizer/Core/Defines.h"

typedef struct chaz_TestBatch chaz_TestBatch;

typedef void
(*chaz_TestBatch_destroy_t)(chaz_TestBatch *batch);

struct chaz_TestBatch {
    unsigned test_num;
    unsigned num_tests;
    unsigned num_passed;
    unsigned num_failed; 
    unsigned num_skipped;
	chaz_TestBatch_destroy_t destroy;
};

/* Constructor for TestBatch.
 */
chaz_TestBatch*
chaz_TestHand_new_batch(unsigned num_tests);

/* These tests all require the file _charm_test.h.  See the documentation for
 * Charmonizer.h for instructions on how to produce it.
 *
 * No other header files should be included other than _charm_test.h and this
 * one.
 * 
 * Since Charmonizer conditionally defines many symbols, it can be difficult
 * to tell whether a symbol is missing because it should not have been
 * generated, or whether it is missing because an error occurred.  These test
 * functions make the assumption that any missing symbols have a good excuse
 * for their absence, and test only defined symbols.  This may result in
 * undetected failure some of the time.  However, missing symbols required by
 * your application will trigger compile-time errors, so the theoretical
 * problem of silent failure is less severe than it appears, affecting only
 * fallbacks.
 */
chaz_TestBatch* 
chaz_TestHand_test_FuncMacro();

chaz_TestBatch* 
chaz_TestHand_test_Headers();

chaz_TestBatch* 
chaz_TestHand_test_Integers();

chaz_TestBatch* 
chaz_TestHand_test_LargeFiles();

chaz_TestBatch* 
chaz_TestHand_test_UnusedVars();

chaz_TestBatch* 
chaz_TestHand_test_VariadicMacros();

/* Print a message indicating pass/fail based on [value].
 */
chaz_bool_t
chaz_TestHand_report(chaz_TestBatch *batch, int value, const char *message);

/* Print a message indicating that a test was skipped.
 */
void
chaz_TestHand_report_skip(chaz_TestBatch *batch, const char *message);

/* Print a message indicating that all remaining tests will be skipped.
 */
void
chaz_TestHand_report_skip_remaining(chaz_TestBatch* batch, const char *message);

/* Wrap a call to report(), incrementing tallies based on the results of the
 * test.
 */
#define CHAZ_TESTHAND_ASSERT_TRUE(batch, expression, message) \
         chaz_TestHand_report(batch, expression, message)

/* TODO */
#define CHAZ_TESTHAND_ASSERT_FALSE
#define CHAZ_TESTHAND_ASSERT_STREQ
#define CHAZ_TESTHAND_ASSERT_STRNEQ
#define CHAZ_TESTHAND_ASSERT_FLOATEQ
#define CHAZ_TESTHAND_ASSERT_FLOATNEQ
#define CHAZ_TESTHAND_ASSERT_INTEQ
#define CHAZ_TESTHAND_ASSERT_INTNEQ

#define CHAZ_TESTHAND_SKIP(batch, message) \
        chaz_TestHand_report_skip(batch, message)

#define CHAZ_TESTHAND_SKIP_REMAINING(batch, message) \
	do { \
        chaz_TestHand_report_skip_remaining(batch, message); \
		return batch; \
	} while (0)

#ifdef CHAZ_USE_SHORT_NAMES
# define TestBatch                      chaz_TestBatch
# define TestHand_new_batch             chaz_TestHand_new_batch
# define TestHand_test_FuncMacro        chaz_TestHand_test_FuncMacro
# define TestHand_test_Integers         chaz_TestHand_test_Integers
# define TestHand_test_LargeFiles       chaz_TestHand_test_LargeFiles
# define TestHand_test_UnusedVars       chaz_TestHand_test_UnusedVars
# define TestHand_test_VariadicMacros   chaz_TestHand_test_VariadicMacros
# define TestHand_report                chaz_TestHand_report
# define TestHand_report_skip           chaz_TestHand_report_skip
# define TestHand_report_skip_remaining chaz_TestHand_report_skip_remaining
# define ASSERT_TRUE                    CHAZ_TESTHAND_ASSERT_TRUE
# define SKIP                           CHAZ_TESTHAND_SKIP
# define SKIP_REMAINING                 CHAZ_TESTHAND_SKIP_REMAINING
#endif

#endif /* H_CHAZ_TEST_HANDLER */


/**
 * Copyright 2006 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

