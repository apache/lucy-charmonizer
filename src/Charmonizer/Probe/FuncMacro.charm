#define CHAZ_USE_SHORT_NAMES

#include "Charmonizer/Core/ModHandler.h"
#include "Charmonizer/Core/Util.h"
#include "Charmonizer/Probe/FuncMacro.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>


static char iso_func_code[] = METAQUOTE
    #include "_charm.h" 
    int main() {
        Charm_Setup;
        printf("%s", __func__);
        return 0;
    }
METAQUOTE;

static char gnuc_func_code[] = METAQUOTE
    #include "_charm.h" 
    int main() {
        Charm_Setup;
        printf("%s", __FUNCTION__);
        return 0;
    }
METAQUOTE;


void
chaz_FuncMacro_run(FILE *conf_fh) 
{
    char *output;
    size_t output_len;
    chaz_bool_t has_funcmac      = false;
    chaz_bool_t has_iso_funcmac  = false;
    chaz_bool_t has_gnuc_funcmac = false;

    Start_Run(conf_fh, "FuncMacro");
    
    /* check for ISO func macro */
    output = capture_output(iso_func_code, strlen(iso_func_code), 
        &output_len);
    if (output != NULL && strncmp(output, "main", 4) == 0) {
        has_funcmac     = true;
        has_iso_funcmac = true;
    }
    free(output);

    /* check for GNUC func macro */
    output = capture_output(gnuc_func_code, strlen(gnuc_func_code), 
        &output_len);
    if (output != NULL && strncmp(output, "main", 4) == 0) {
        has_funcmac      = true;
        has_gnuc_funcmac = true;
    }
    free(output);

    /* write out common defines */
    if (has_funcmac) {
        char *macro_text = has_iso_funcmac 
            ? "__func__"
            : "__FUNCTION__";
        append_conf(conf_fh, 
            "#define %sHAS_FUNC_MACRO\n"
            "#define %sFunc_Macro %s\n",
            constant_prefix, macro_prefix, macro_text);
    }

    /* write out specific defines */
    if (has_iso_funcmac) {
       append_conf(conf_fh, "#define %sHAS_ISO_FUNC_MACRO\n",
           constant_prefix);
    }
    if (has_gnuc_funcmac) {
        append_conf(conf_fh, "#define %sHAS_GNUC_FUNC_MACRO\n",
           constant_prefix);
    }

    if (want_short_names) {
        Start_Short_Names(conf_fh);
        if (has_iso_funcmac) 
            shorten_constant("HAS_ISO_FUNC_MACRO");
        if (has_gnuc_funcmac)
            shorten_constant("HAS_GNUC_FUNC_MACRO");
        if (has_iso_funcmac || has_gnuc_funcmac) {
            shorten_constant("HAS_FUNC_MACRO");
            shorten_macro("Func_Macro");
        }
        End_Short_Names(conf_fh);
    }

    End_Run(conf_fh);
}


/**
 * Copyright 2006 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

