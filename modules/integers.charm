CH_api_version
  version 0
CH_end_api_version

/* Check for inttypes.h. */
CH_append_output
  source CH_quote
    #include <stdio.h>
    #include <inttypes.h>
    int main()
    {
        printf("#define HAS_INTTYPES_H 1\n");
        return 0;
    }
  CH_end_quote
CH_end_append_output


/* Check for long longs. */
CH_append_output
  source CH_quote
    #include <stdio.h>
    int main() 
    {
        long long foo = 4;
        printf("#define HAS_LONG_LONG 1\n");
        printf("#define SIZEOF_LONG_LONG %d\n", (int)sizeof(long long));
        return 0;
    }
  CH_end_quote
CH_end_append_output


/* Record sizeof() for several common integer types. */
CH_append_output
  source CH_quote
    #include <stdio.h>
    int main () {
        printf("#define SIZEOF_CHAR %d\n", (int)sizeof(char));
        printf("#define SIZEOF_SHORT %d\n", (int)sizeof(short));
        printf("#define SIZEOF_INT %d\n", (int)sizeof(int));
        printf("#define SIZEOF_LONG %d\n", (int)sizeof(long));
        printf("#define SIZEOF_PTR %d\n", (int)sizeof(void *));
        return 0;
    }
  CH_end_quote
CH_end_append_output


CH_append_raw
    string CH_quote

/* 8 bit integers */
#if SIZEOF_CHAR == 1
    printf("typedef char %s" "i8_t;\n", TYPEDEF_PREFIX);  
    printf("typedef unsigned char %s" "u8_t;\n", TYPEDEF_PREFIX);  
#else 
 #error "No 8-bit integer type available"
#endif

/* 16-bit integers */
#if SIZEOF_SHORT == 2
    printf("typedef short %s" "i16_t;\n", TYPEDEF_PREFIX);  
    printf("typedef unsigned short %s" "u16_t;\n", TYPEDEF_PREFIX);  
#else
 #error "No 16-bit integer type available"
#endif

/* 32-bit integers */
#if SIZEOF_INT == 4
    printf("typedef int %s" "i32_t;\n", TYPEDEF_PREFIX);  
    printf("typedef unsigned int %s" "u32_t;\n", TYPEDEF_PREFIX);  
#elif SIZEOF_LONG == 4
    printf("typedef long %s" "i32_t;\n", TYPEDEF_PREFIX);  
    printf("typedef unsigned long %s" "u32_t;\n", TYPEDEF_PREFIX);  
#else
 #error "No 32-bit integer type available"
#endif

 /* 64-bit integers */
#if SIZEOF_LONG == 8
    printf("typedef long %s" "i64_t;\n", TYPEDEF_PREFIX);  
    printf("typedef unsigned long %s" "u64_t;\n", TYPEDEF_PREFIX); 
#elif defined HAS_LONG_LONG
 #if SIZEOF_LONG_LONG == 8
    printf("typedef long long %s" "i64_t;\n", TYPEDEF_PREFIX);  
    printf("typedef unsigned long long %s" "u64_t;\n", TYPEDEF_PREFIX); 
 #else
  #error "No 64-bit integer type available"
 #endif
#endif

/* pointers */
#if SIZEOF_PTR == SIZEOF_INT
    printf("typedef int %s" "iptr_t;\n", TYPEDEF_PREFIX);
    printf("typedef unsigned int %s" "uptr_t;\n", TYPEDEF_PREFIX);
#elif SIZEOF_PTR == SIZEOF_LONG
    printf("typedef long %s" "ptr_t;\n", TYPEDEF_PREFIX);
    printf("typedef unsigned long %s" "uptr_t;\n", TYPEDEF_PREFIX);
#elif defined HAS_LONG_LONG
 #if SIZEOF_PTR == SIZEOF_LONG_LONG
    printf("typedef long long %s" "iptr_t;\n", TYPEDEF_PREFIX);
    printf("typedef unsigned long long %s" "uptr_t;\n", TYPEDEF_PREFIX);
 #else
  #error "Couldn't find integer type with same size as pointer"
 #endif
#endif

  CH_end_quote
CH_end_append_raw
