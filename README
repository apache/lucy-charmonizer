NAME

    Charmonizer - write portable C header files

SYNOPSIS

    #include "Charmonizer.h"
    #include "Charmonizer/Integers.h"
    #include "Charmonizer/LargeFiles.h"

    int main() {
        /* open and begin config file */
        FILE *config_fh = fopen("myconf.h", "w");
        if (config_fh == NULL) {
            fprintf(stderr, "Error opening myconf.h\n")
            exit(1);
        }
        printf(config_fh, "/* Auto-generated file - do not edit!! */\n\n");
        
        /* set up Charmonizer */
        chaz_init();
        chaz_set_compiler("gcc");
        
        /* run desired Charmonizer modules */
        chaz_Integers_run(config_fh);
        chaz_LargeFiles_run(config_fh);

        /* tear down Charmonizer */
        chaz_clean_up();

        return 0;
    }

DESCRIPTION

    Charmonizer is a tool for writing portable C header files.  It works by
    attempting to compile lots of little programs and analyzing the output
    from those that build successfully.  It is intended to work with any ISO
    C90-compilant compiler and (eventually) on any operating system, without
    requiring a specific shell.

    Charmonizer is organized as one central library, "Charmonizer.h", and a
    suite of topically oriented modules, e.g. "Charmonizer/Integers.h",
    "Charmonizer/LargeFiles.h".  Each module exports 1 primary function,
    ModuleName_run(FILE* conf_fh), which appends its output to the supplied
    file handle.  A typical Charmonizer application proceeds in two phases:

        1) Set up the Charmonizer environment and open a config file 
           for writing.
        2) Run selected modules, building up the config file bit by bit.

    The config file can be further customized either by writing your own data
    to it or possibly by setting options which affect the behavior of certain
    modules.

METAQUOTE UTILITY

    Charmonizer is a C program which writes C code.  Writing C from C is
    ordinarily quite awkward, because when you try to embed more than a line
    or two of C source code inside C string literals, things get ugly fast.  

    To get around this problem, Charmonizer uses a source filter.  In the
    "real" Charmonizer source code, longer code fragments are surrounded by
    METAQUOTE tags instead of literal double quotes.  
    
        char hello_source[] = METAQUOTE
            #include <stdio.h>
            int main() { 
                printf("Hello, world.\n");
                return 0;
            }
        METAQUOTE;

    These source files are run through the "metaquote" utility -- which
    transforms everything between paired METAQUOTE tags into concatenated
    string literals.  The result is hideous but valid C.

COPYRIGHT AND LICENSE

    /**
     * Copyright 2006 The Apache Software Foundation
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     * implied.  See the License for the specific language governing
     * permissions and limitations under the License.
     */

